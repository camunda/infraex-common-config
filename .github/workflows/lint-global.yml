---
name: lint-global

# This workflow is reused accross our repositories and enables auto-fix for a given actor

on:
    workflow_call:
        inputs:
            autofix-actor:
                description: Name of the actor that will trigger auto-fix
                default: renovate[bot]
                type: string

jobs:
    lint:
        name: pre-commit
        runs-on: ubuntu-latest
        timeout-minutes: 10
        steps:
            # This step is required as we want to use the bot for the checkout,
            # this way, the auto-fix step will commit using this user
            - name: Set autofix_pr environment variable
              run: |
                  if [[ "${{ github.actor }}" == "${{ inputs.autofix-actor }}" && "${{ github.event_name }}" == "pull_request" ]]; then
                    echo "autofix_pr=true" | tee -a "$GITHUB_ENV"
                  else
                    echo "autofix_pr=false" | tee -a "$GITHUB_ENV"
                  fi

            - name: Generate token for GitHub
              id: generate-github-token
              if: env.autofix_pr == 'true'
              uses: camunda/infra-global-github-actions/generate-github-app-token-from-vault-secrets@f5bbd25c97507d6d2a884eebecaa804a6e34b15f     # f5bbd25c97507d6d2a884eebecaa804a6e34b15f
              with:
                  github-app-id-vault-key: GITHUB_APP_ID
                  github-app-id-vault-path: secret/data/products/infrastructure-experience/ci/common
                  github-app-private-key-vault-key: GITHUB_APP_PRIVATE_KEY
                  github-app-private-key-vault-path: secret/data/products/infrastructure-experience/ci/common
                  vault-auth-method: approle
                  vault-auth-role-id: ${{ secrets.VAULT_ROLE_ID }}
                  vault-auth-secret-id: ${{ secrets.VAULT_SECRET_ID }}
                  vault-url: ${{ secrets.VAULT_ADDR }}


            - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332     # v4
              if: env.autofix_pr == 'true'
              # see http>s://github.com/EndBug/add-and-commit?tab=readme-ov-file#working-with-prs
              with:
                  token: ${{ steps.generate-github-token.outputs.token }}
                  repository: ${{ github.event.pull_request.head.repo.full_name }}
                  ref: ${{ github.event.pull_request.head.ref }}

            - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332     # v4
              if: env.autofix_pr == 'false'

            - name: Install tooling using asdf
              uses: asdf-vm/actions/install@05e0d2ed97b598bfce82fd30daf324ae0c4570e6   # v3

            - uses: pre-commit/action@2c7b3805fd2a0fd8c1884dcaebf91fc102a13ecd   # v3.0.1
              id: pre_commit_check_first_run
              with:
                  extra_args: --all-files --verbose

            - name: Rerun pre-commit to autofix files if pre-commit failed
              uses: pre-commit/action@2c7b3805fd2a0fd8c1884dcaebf91fc102a13ecd     # v3.0.1
              if: always() && env.autofix_pr == 'true' && steps.pre_commit_check_first_run.outcome != 'success'
              id: pre_commit_check_second_run
              with:
                  extra_args: --all-files --verbose

            - name: Import Secrets
              # todo, only import if commit is needed
              id: secrets
              uses: hashicorp/vault-action@d1720f055e0635fd932a1d2a48f87a666a57906c # v3
              with:
                  url: ${{ secrets.VAULT_ADDR }}
                  method: approle
                  roleId: ${{ secrets.VAULT_ROLE_ID }}
                  secretId: ${{ secrets.VAULT_SECRET_ID }}
                  exportEnv: false
                  secrets: |
                      secret/data/products/infrastructure-experience/ci/common GITHUB_APP_EMAIL;
                      secret/data/products/infrastructure-experience/ci/common GITHUB_APP_PRIVATE_KEY;
                      secret/data/products/infrastructure-experience/ci/common GITHUB_APP_DISPLAY_NAME;

            - name: Set up GPG
              #if: always() && env.autofix_pr == 'true'  && steps.pre_commit_check_first_run.outcome != 'success' && steps.pre_commit_check_second_run.outcome
              #    == 'success'
              run: |
                  mkdir -p ~/.gnupg
                  chmod 700 ~/.gnupg

                  echo "${{ steps.secrets.outputs.GITHUB_APP_PRIVATE_KEY }}" | gpg --batch --import

                  echo "use-agent" >> ~/.gnupg/gpg.conf
                  echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf

                  # find the key id
                  KEY_ID="$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)"

                  # Configure git to use the gpg key
                  git config --global gpg.program gpg
                  git config --global user.signingkey "$KEY_ID"
                  git config --global commit.gpgSign true

            - name: Commit Changes made by pre-commit fix
              # This workflow checks the files after the first pre-commit run.
              # If the second run fixes the files, it indicates that pre-commit applied automatic fixes.
              # If the issue persists, it means pre-commit was unable to resolve it.
              # We want to apply automatic fixes made by pre-commit.
              if: always() && env.autofix_pr == 'true'  && steps.pre_commit_check_first_run.outcome != 'success' && steps.pre_commit_check_second_run.outcome
                  == 'success'
              uses: EndBug/add-and-commit@a94899bca583c204427a224a7af87c02f9b325d5     # v9
              with:
                  message: 'chore: update files from pre-commit run'
                  commit: -S
                  author_name: ${{ steps.secrets.outputs.GITHUB_APP_DISPLAY_NAME }}
                  author_email: ${{ steps.secrets.outputs.GITHUB_APP_EMAIL }}
                  committer_name: ${{ steps.secrets.outputs.GITHUB_APP_DISPLAY_NAME }}
                  committer_email: ${{ steps.secrets.outputs.GITHUB_APP_EMAIL }}
