---
name: todo-checker-global

# This reusable workflow scans newly added lines in a pull request for TODO comments.
# For each TODO found that hasn't been marked as acknowledged (via üëé reaction), it posts a comment on the corresponding line.
# This helps ensure TODOs are not forgotten or left unintentionally in production code.
#
# If a TODO is no longer relevant or needs no further reminders, reacting with üëé on the comment suppresses future alerts.
#
# This workflow is designed to be used across multiple repositories via `workflow_call` (see `todo-checker.yml`).


on:
    workflow_call:

env:
    # renovate: datasource=github-releases depName=ianlewis/todos
    TODOS_VERSION: v0.13.0

jobs:
    check-todos:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            pull-requests: write

        steps:
            - name: Checkout code
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  fetch-depth: 0 # capture all history

            - name: Compute todos cache key
              id: cache-key
              run: |
                  export os_key=$(uname | tr '[:upper:]' '[:lower:]')
                  echo "cache_key=todos-$os_key-${{ env.TODOS_VERSION }}" | tee -a "$GITHUB_OUTPUT"
                  echo "cache_path=$(go env GOPATH)/bin/todos" >> "$GITHUB_OUTPUT"
                  echo "$(go env GOPATH)/bin" >> "$GITHUB_PATH"

            - name: Restore todos cache
              uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4
              id: cache-tools
              with:
                  path: ${{ steps.cache-key.outputs.cache_path }}
                  key: ${{ steps.cache-key.outputs.cache_key }}

            - name: Install todos CLI if not present
              if: ${{ steps.cache-tools.outputs.cache-hit != 'true' }}
              run: |
                  go install "github.com/ianlewis/todos/cmd/todos@${TODOS_VERSION}"

            - name: Save todos cache
              if: ${{ steps.cache-tools.outputs.cache-hit != 'true' }}
              uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # v4
              with:
                  path: ${{ steps.cache-key.outputs.cache_path }}
                  key: ${{ steps.cache-key.outputs.cache_key }}


            - name: Get PR diff and TODOs
              env:
                  GH_TOKEN: ${{ github.token }}
                  PR_NUMBER: ${{ github.event.pull_request.number }}
                  WORKFLOW_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                  BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
              run: |
                  set -euo pipefail

                  echo "üìå Workflow triggered by Pull Request #${PR_NUMBER}"
                  PR_DATA=$(gh pr view "$PR_NUMBER" --json title,url,author -q '{title: .title, url: .url, author: .author.login}')
                  PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
                  PR_URL=$(echo "$PR_DATA" | jq -r '.url')
                  PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.author')

                  echo "‚û°Ô∏è Title: $PR_TITLE"
                  echo "üîó URL: $PR_URL"
                  echo "üôã Author: @$PR_AUTHOR"

                  echo "üîç Getting merge base SHA with base branch $BASE_BRANCH"
                  BASE_SHA=$(git merge-base "origin/$BASE_BRANCH" HEAD)
                  HEAD_SHA=$(git rev-parse HEAD)

                  echo "üß† Running todos tool"
                  set +e
                  todos -o json > todos.json
                  code=$?
                  if [ "$code" -ne 0 ] && [ "$code" -ne 1 ]; then
                    exit $code
                  fi
                  set -e

                  echo "üì• Getting existing PR comments"
                  gh api "repos/${{ github.repository }}/pulls/${PR_NUMBER}/comments" > comments.json

                  echo "üîÅ Processing TODOs with git blame verification"
                  echo "0" > todo_count.txt

                  jq -c '.' todos.json | while IFS= read -r todo; do
                    FILE=$(echo "$todo" | jq -r '.path')
                    LINE=$(echo "$todo" | jq -r '.line')
                    TEXT=$(echo "$todo" | jq -r '.text')

                    echo "Checking $FILE:$LINE"

                    if [ ! -f "$FILE" ]; then
                      echo "‚è≠Ô∏è $FILE does not exist, skipping"
                      continue
                    fi

                    blamed_commit=$(git blame -L "$LINE","$LINE" --porcelain "$FILE" | head -n1 | cut -d' ' -f1)

                    if [ -z "$blamed_commit" ]; then
                      echo "‚è≠Ô∏è Could not determine commit for $FILE:$LINE"
                      continue
                    fi

                    # Check if blamed_commit is strictly inside PR commits:
                    # 1) BASE_SHA is ancestor of blamed_commit (blamed_commit is after base)
                    # 2) blamed_commit is ancestor of HEAD_SHA (blamed_commit is in PR branch history)
                    # 3) blamed_commit is not the same as BASE_SHA (exclude base commits)
                    if [ "$blamed_commit" = "$BASE_SHA" ]; then
                      echo "‚è≠Ô∏è $FILE:$LINE ignored, blamed_commit is the base commit ($blamed_commit)"
                      continue
                    elif git merge-base --is-ancestor "$BASE_SHA" "$blamed_commit" && git merge-base --is-ancestor "$blamed_commit" "$HEAD_SHA"; then
                      echo "‚úÖ $FILE:$LINE is strictly part of the PR (commit $blamed_commit)"
                    else
                      echo "‚è≠Ô∏è $FILE:$LINE ignored, blamed_commit $blamed_commit not strictly in PR"
                      continue
                    fi

                    export FILE="$FILE"
                    export LINE="$LINE"
                    EXISTING=$(yq e '
                      .[]
                      | select(
                          .path == env(FILE) and
                          .line == env(LINE) and
                          .user.login == "github-actions[bot]" and
                          (.body | contains("A new Todo was discovered"))
                        ) | . // ""
                    ' comments.json)

                    if [ -n "$EXISTING" ]; then
                      echo "‚úÖ $FILE:$LINE already has a TODO comment"

                      REACT_DOWN=$(echo "$EXISTING" | yq -I=0 -o=json -p=json 'select(documentIndex == 0) | .reactions["-1"] // 0')
                      if [ "$REACT_DOWN" -ge 1 ]; then
                        echo "üîï Already acknowledged via üëé reaction"
                      else
                        count=$(cat todo_count.txt)
                        count=$((count + 1))
                        echo "$count" > todo_count.txt
                      fi
                    else
                      count=$(cat todo_count.txt)
                      count=$((count + 1))
                      echo "$count" > todo_count.txt

                      COMMENT_BODY="A new Todo was discovered. If it is not a priority right now, consider marking it for later attention.
                      <br> TODO: \`$TEXT\`
                      <br>**üîï React with üëé (thumbs down) to this comment to acknowledge and prevent further reminders.**
                      <br>
                      <a href=\"$WORKFLOW_URL\" target=\"_blank\">Click here to retry and refresh the list of remaining TODOs</a>"

                      echo "üí¨ Commenting on $FILE:$LINE"
                      gh api \
                          --method POST \
                          -H "Accept: application/vnd.github+json" \
                          -H "X-GitHub-Api-Version: 2022-11-28" \
                          "/repos/${{ github.repository }}/pulls/${PR_NUMBER}/comments" \
                          -f "body=$COMMENT_BODY" \
                          -f "commit_id=${{ github.event.pull_request.head.sha }}" \
                          -f "path=$FILE" \
                          -F "line=$LINE" \
                          -f "side=RIGHT"
                    fi

                  done

                  found_remaining_todos=$(cat todo_count.txt)
                  echo "$found_remaining_todos"

                  if [ "$found_remaining_todos" -gt 0 ]; then
                    echo "::error title=Unresolved TODOs::‚ùå $found_remaining_todos TODO(s) remain unresolved. React with üëé to suppress reminders."
                    exit "$found_remaining_todos"
                  fi
