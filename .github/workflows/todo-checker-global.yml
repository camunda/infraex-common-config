---
name: todo-checker-global

# This workflow is reused accross our repositories to check TODOs in PRs

on:
    workflow_call:

env:
    # renovate: datasource=github-releases depName=ianlewis/todos
    TODOS_VERSION: v0.13.0

jobs:
    check-todos:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            pull-requests: write

        steps:
            - name: Checkout code
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  fetch-depth: 0 # capture all history

            - name: Compute todos cache key
              id: cache-key
              run: |
                  export os_key=$(uname | tr '[:upper:]' '[:lower:]')
                  echo "cache_key=todos-$os_key-${{ env.TODOS_VERSION }}" | tee -a "$GITHUB_OUTPUT"
                  echo "cache_path=$(go env GOPATH)/bin/todos" >> "$GITHUB_OUTPUT"
                  echo "$(go env GOPATH)/bin" >> "$GITHUB_PATH"

            - name: Restore todos cache
              uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4
              id: cache-tools
              with:
                  path: ${{ steps.cache-key.outputs.cache_path }}
                  key: ${{ steps.cache-key.outputs.cache_key }}

            - name: Install todos CLI if not present
              if: ${{ steps.cache-tools.outputs.cache-hit != 'true' }}
              run: |
                  go install "github.com/ianlewis/todos/cmd/todos@${TODOS_VERSION}"

            - name: Save todos cache
              if: ${{ steps.cache-tools.outputs.cache-hit != 'true' }}
              uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # v4
              with:
                  path: ${{ steps.cache-key.outputs.cache_path }}
                  key: ${{ steps.cache-key.outputs.cache_key }}


            - name: Get PR diff and TODOs
              env:
                  GH_TOKEN: ${{ github.token }}
                  PR_NUMBER: ${{ github.event.pull_request.number }}
              run: |
                  set -euo pipefail

                  echo "🔍 Getting diff from base branch"
                  BASE_SHA=$(git merge-base origin/main HEAD)
                  git diff "$BASE_SHA"...HEAD > pr.diff

                  echo "📄 Parsing added lines"
                  awk '
                  /^diff --git / { file="" }
                  /^+++ b\//     { file=substr($0,7) }
                  /^@@ / {
                    split($0, a, " ")
                    split(a[3], new, ",")
                    new_start = substr(new[1], 2)
                    curr = new_start
                  }
                  /^+/ && !/^\+\+\+/ {
                    print file ":" curr
                    curr++
                  }
                  /^[^-+]/ { curr++ }
                  ' pr.diff > added_lines.txt

                  echo "🧠 Running todos"
                  set +e
                  todos -o json > todos.json
                  code=$?
                  if [ "$code" -ne 0 ] && [ "$code" -ne 1 ]; then
                    exit $code
                  fi
                  set -e

                  echo "📥 Getting existing comments"
                  gh api "repos/${{ github.repository }}/pulls/${PR_NUMBER}/comments" > comments.json

                  yq comments.json

                  FOUND_REMAINING_TODO=false

                  echo "🔁 Processing TODOs"
                  while read -r todo; do
                    FILE=$(echo "$todo" | jq -r '.path')
                    LINE=$(echo "$todo" | jq -r '.line')
                    TEXT=$(echo "$todo" | jq -r '.text')

                    echo "Checking $FILE:$LINE"

                    if ! grep -q "^$FILE:$LINE$" added_lines.txt; then
                      echo "❌ $FILE:$LINE not in added lines"
                      continue
                    fi

                    echo "✅ $FILE:$LINE is in added lines"

                    export FILE="$FILE"
                    export LINE="$LINE"

                    EXISTING=$(yq e '
                      .[]
                      | select(
                          .path == env(FILE) and
                          (.line | tostring) == env(LINE) and
                          .user.login == "github-actions[bot]" and
                          (.body | contains("A new Todo was discovered"))
                        )
                      | first
                    ' comments.json)

                    SKIP=false

                    if [ "$EXISTING" != "null" ]; then
                      SKIP=true
                      echo "✅ $FILE:$LINE a comment already reports this TODO"

                      ID=$(echo "$EXISTING" | jq -r '.id')
                      RESPONSES=$(gh api "repos/${{ github.repository }}/pulls/comments/$ID/replies" || true)
                      if echo "$RESPONSES" | jq -r '.[].body' | grep -Ei 'ACK|Ignore' > /dev/null; then
                        echo "🔕 Already acknowledged or ignored"
                      else
                        FOUND_REMAINING_TODO=true
                      fi
                    fi

                    if [ "$SKIP" = false ]; then
                      COMMENT_BODY="A new Todo was discovered. If it is not a priority right now, consider marking it for later attention.
                      <br> TODO: \`$TEXT\`
                      <br>**🔕 Reply with \`Ignore\` to prevent further reminders for this line.**</sub>"

                      FOUND_REMAINING_TODO=true
                      echo "💬 Commenting on $FILE:$LINE"
                      gh api \
                          --method POST \
                          -H "Accept: application/vnd.github+json" \
                          -H "X-GitHub-Api-Version: 2022-11-28" \
                          "/repos/${{ github.repository }}/pulls/${PR_NUMBER}/comments" \
                          -f "body=$COMMENT_BODY" \
                          -f "commit_id=${{ github.event.pull_request.head.sha }}" \
                          -f "path=$FILE" \
                          -F "line=$LINE" \
                          -f "side=RIGHT"
                    fi
                  done < todos.json

                  if [ "$FOUND_REMAINING_TODO" = true ]; then
                    echo "There are still unresolved todos remaining. Reply \"Ignore\" if you want to ignore them."
                    exit 1
                  fi
