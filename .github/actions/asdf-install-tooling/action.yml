---
name: Install asdf and tools
description: |
    Install asdf and all tools listed in the .tool-versions file.
    This action will:
      - Check if the tools are present in the cache, otherwise it will:
      - Download and verify the asdf binary
      - Extract and install it in ~/.local/bin
      - Automatically install all plugins listed in .tool-versions
      - Install the required tool versions using asdf
      - Cache the installed tools


inputs:
    version:
        description: asdf version
        # renovate: datasource=github-tags depName=asdf-vm/asdf
        default: v0.16.4
    os:
        description: Target OS (linux or darwin)
        default: linux
    arch:
        description: Target architecture (amd64, arm64, etc.). Default will try to detect runner arch.
        default: auto
    cache:
        description: Use cache for tools installed
        default: 'true'
    tool_versions_files:
        description: |
            List of the path `.tool-versions` files to install.
            Each path should be specified on a new line.
        default: |
            .tool-versions


runs:
    using: composite
    steps:
        - name: Detect architecture if auto
          id: detect-arch
          shell: bash
          run: |
              if [[ "${{ inputs.arch }}" == "auto" ]]; then
                ARCH=$(uname -m)
                case "$ARCH" in
                  x86_64) ARCH="amd64" ;;
                  aarch64) ARCH="arm64" ;;
                  *) echo "Unsupported architecture: $ARCH"; exit 1 ;;
                esac
                echo "Detected architecture: $ARCH"
              else
                ARCH="${{ inputs.arch }}"
              fi
              echo "arch=$ARCH" | tee -a "$GITHUB_OUTPUT"

        - name: Compute cache key
          id: cache-key
          shell: bash
          run: |
              WEEK_NUMBER="$(date +%V)"

              COMBINED_HASHES=""

              # Loop over each .tool-versions file, generate a hash for each one, and combine them
              IFS=$'\n' read -r -d '' -a tool_versions_files <<< "${{ inputs.tool_versions_files }}"
              for tool_file in "${tool_versions_files[@]}"; do
                if [ -f "$tool_file" ]; then
                  FILE_HASH=$(sha256sum "$tool_file" | awk '{print $1}')
                  COMBINED_HASHES="${COMBINED_HASHES}${FILE_HASH}"
                fi
              done

              # Now generate a final hash of the combined hashes (this is the "hash of hashes")
              FINAL_HASH=$(echo -n "$COMBINED_HASHES" | sha256sum | awk '{print $1}')

              echo "cache_key=${{ runner.os }}-${{ steps.detect-arch.outputs.arch }}-${{ inputs.version }}-tooling-${FINAL_HASH}-week-${WEEK_NUMBER}" | tee -a "$GITHUB_OUTPUT"
              echo "cache_asdf_path=$HOME/.asdf" | tee -a "$GITHUB_OUTPUT"
              echo "cache_asdf_bin_path=$HOME/.local/bin/asdf" | tee -a "$GITHUB_OUTPUT"

        - name: Check if asdf cache exists
          id: cache-asdf-check
          if: ${{ inputs.cache == 'true' }}
          uses: actions/cache/restore@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4
          with:
              path: |
                  ${{ steps.cache-key.outputs.cache_asdf_path }}
                  ${{ steps.cache-key.outputs.cache_asdf_bin_path }}
              # invalidate the cache every week as we might need dependencies of the packages
              key: ${{ steps.cache-key.outputs.cache_key }}

        - name: Install asdf when no cache hit
          id: install
          shell: bash
          if: ${{ inputs.cache == 'false' || steps.cache-asdf-check.outputs.cache-hit != 'true' }}
          run: |
              set -euxo pipefail

              # Variables
              FILE_NAME="asdf-${{ inputs.version }}-${{ inputs.os }}-${{ steps.detect-arch.outputs.arch }}.tar.gz"
              DOWNLOAD_URL="https://github.com/asdf-vm/asdf/releases/download/${{ inputs.version }}/${FILE_NAME}"
              MD5_URL="${DOWNLOAD_URL}.md5"

              echo "Installing asdf ${{ inputs.version }} ($DOWNLOAD_URL)"

              # Update destination
              mkdir -p "$HOME/.local/bin"

              # Download asdf binary and checksum
              curl -L -o asdf.tar.gz "$DOWNLOAD_URL"
              curl -L -o asdf.md5 "$MD5_URL"

              # Verify MD5 checksum
              CHECKSUM=$(awk '{print $1}' asdf.md5)
              echo "$CHECKSUM  asdf.tar.gz" | md5sum -c -

              # Extract and install
              tar -xzf asdf.tar.gz -C "$HOME/.local/bin"
              chmod +x "$HOME/.local/bin/asdf"

        - name: Add asdf path to the action path
          shell: bash
          run: |
              echo "$HOME/.local/bin" | tee -a "$GITHUB_PATH"
              echo "${ASDF_DATA_DIR:-$HOME/.asdf}/shims" | tee -a "$GITHUB_PATH"

        - name: Install asdf plugins and tools from .tool-versions
          id: tools-plugins-install
          if: ${{ inputs.cache == 'false' || steps.cache-asdf-check.outputs.cache-hit != 'true' }}
          shell: bash
          run: |
              asdf current

              IFS=$'\n' read -r -d '' -a tool_versions_files <<< "${{ inputs.tool_versions_files }}"
              for tool_file in "${tool_versions_files[@]}"; do
                if [ -f "$tool_file" ]; then
                  echo "Installing asdf plugins from ${tool_file}"

                  # Loop through each plugin in the current .tool-versions file
                  for plugin in $(awk '!/^#/ && NF {print $1}' "$tool_file"); do
                    # Add plugin if it is not already installed
                    if ! asdf plugin list | grep -q "^${plugin}$"; then
                      echo "Adding plugin ${plugin}"
                      asdf plugin add "${plugin}"
                    else
                      echo "Plugin ${plugin} already added"
                    fi
                  done

                  echo "Updating all asdf plugins"
                  asdf plugin update --all

                  # Install the tools specified in the current .tool-versions file
                  asdf install
                else
                  echo "No ${tool_file} file found, skipping plugin installation for this file."
                fi
              done

        - name: Cache installed tools
          id: cache-tools
          if: ${{ steps.cache-asdf-check.outputs.cache-hit != 'true' }}
          uses: actions/cache/save@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4
          with:
              path: |
                  ${{ steps.cache-key.outputs.cache_asdf_path }}
                  ${{ steps.cache-key.outputs.cache_asdf_bin_path }}
              # invalidate the cache every week as we might need dependencies of the packages
              key: ${{ steps.cache-key.outputs.cache_key }}
