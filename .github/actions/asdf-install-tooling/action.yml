---
name: Install asdf and tools
description: |
    Install asdf and all tools listed in the .tool-versions file.
    This action will:
      - Check if the tools are present in the cache, otherwise it will:
      - Download and verify the asdf binary
      - Extract and install it in ~/.local/bin
      - Automatically install all plugins listed in .tool-versions
      - Install the required tool versions using asdf
      - Cache the installed tools


inputs:
    version:
        description: asdf version
    # renovate: datasource=github-tags depName=asdf-vm/asdf
        default: v0.16.0
    os:
        description: Target OS (linux or darwin)
        default: linux
    arch:
        description: Target architecture (amd64, arm64, etc.)
        default: amd64
    asdf_install_path:
        description: Path where asdf is installed
        default: ~/.local/bin
    asdf_path_tools:
        description: Path where asdf installs tools
        default: ~/.asdf
    cache:
        description: Use cache for tools installed
        default: 'true'

runs:
    using: composite
    steps:
        - name: Compute cache key
          id: cache-key
          shell: bash
          run: |
              WEEK_NUMBER="$(date +%V)"

              echo "cache_key=${{ runner.os }}-${{ inputs.version }}-tooling-${{ hashFiles('**/.tool-versions') }}-week-${WEEK_NUMBER}" | tee -a "$GITHUB_OUTPUT"

        - name: Check if asdf cache exists
          id: cache-asdf-check
          if: ${{ inputs.cache == 'true' }}
          uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4
          with:
              path: |
                  ${{ inputs.asdf_path_tools }}
              # invalidate the cache every week as we might need dependencies of the packages
              key: ${{ steps.cache-key.outputs.cache_key }}

        - name: Install asdf when no cache hit
          id: install
          shell: bash
          if: ${{ inputs.cache == 'false' || steps.cache-asdf-check.outputs.cache-hit != 'true' }}
          run: |
              set -euxo pipefail

              # Variables
              FILE_NAME="asdf-${{ inputs.version }}-${{ inputs.os }}-${{ inputs.arch }}.tar.gz"
              DOWNLOAD_URL="https://github.com/asdf-vm/asdf/releases/download/${{ inputs.version }}/${FILE_NAME}"
              MD5_URL="${DOWNLOAD_URL}.md5"

              echo "Installing asdf ${{ inputs.version }} ($DOWNLOAD_URL)"

              # Update destination
              mkdir -p "${{ inputs.asdf_install_path }}"
              echo "${{ inputs.asdf_install_path }}" | tee -a "$GITHUB_PATH"

              # Download asdf binary and checksum
              curl -L -o asdf.tar.gz "$DOWNLOAD_URL"
              curl -L -o asdf.md5 "$MD5_URL"

              # Verify MD5 checksum
              CHECKSUM=$(awk '{print $1}' asdf.md5)
              echo "$CHECKSUM  asdf.tar.gz" | md5sum -c -

              # Extract and install
              tar -xzf asdf.tar.gz -C "${{ inputs.asdf_install_path }}"
              chmod +x "${{ inputs.asdf_install_path }}/asdf"

        - name: Install asdf plugins and tools from .tool-versions
          id: tools-plugins-install
          if: ${{ inputs.cache == 'false' || steps.cache-asdf-check.outputs.cache-hit != 'true' }}
          shell: bash
          run: |
              asdf current

              if [ -f .tool-versions ]; then
                echo "Installing asdf plugins"

                for plugin in $(awk '!/^#/ && NF {print $1}' .tool-versions); do
                  if ! asdf plugin list | grep -q "^${plugin}$"; then
                    asdf plugin add "${plugin}"
                  else
                    echo "Plugin ${plugin} already added"
                  fi
                done

                echo "Update all asdf plugins"
                asdf plugin update --all

                asdf install

              else
                echo "No .tool-versions file found, skipping plugin installation."
              fi

        - name: Add asdf path to the action path
          shell: bash
          run: |
              echo "${{ inputs.asdf_install_path }}" | tee -a "$GITHUB_PATH"
              echo "${ASDF_DATA_DIR:-$HOME/.asdf}/shims" | tee -a "$GITHUB_PATH"

        - name: Cache installed tools
          id: cache-tools
          if: ${{ inputs.cache == 'true' && steps.cache-asdf-check.outputs.cache-hit != 'true' }}
          uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4
          with:
              path: |
                  ${{ inputs.asdf_path_tools }}
              # invalidate the cache every week as we might need dependencies of the packages
              key: ${{ steps.cache-key.outputs.cache_key }}
